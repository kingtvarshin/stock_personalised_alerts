import smtplib
import datetime
import pandas as pd
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.application import MIMEApplication
from constant_vars import indicators_result_csv_path_large, indicators_result_csv_path_mid, indicators_result_csv_path_small, indicators_result_csv_path_full
from dotenv import load_dotenv
import os

def mail_message():
    try:
        load_dotenv()
        EMAIL_ID_LIST = eval(os.getenv('EMAIL_ID_LIST'))
        SENDER_EMAIL = os.getenv('SENDER_EMAIL')
        SENDER_EMAIL_PASSWORD = os.getenv('SENDER_EMAIL_PASSWORD')

        message = MIMEMultipart("alternative")
        message['Subject'] = f"Personalised Stock Alert : {datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}"
        message['Mime-Version'] = "1.0"
        message['Content-Type'] = "text/html"

        # HTML header with responsive table style
        htmlheader = f'''
        <html>
        <head>
          <style>
            body {{
              font-family: Arial, sans-serif;
              margin: 0;
              padding: 20px;
              background-color: #f7f9fc;
              color: #333;
            }}
            h1 {{
              color: #005792;
            }}
            h2 {{
              background-color: #005792;
              color: #fff;
              padding: 10px;
              border-radius: 6px;
              font-size: 18px;
            }}
            .table-wrapper {{
              overflow-x: auto;
              width: 100%;
              margin-bottom: 30px;
            }}
            table {{
              border-collapse: collapse;
              width: 100%;
              min-width: 600px;
              font-size: 14px;
              display: block;
              max-width: 100%;
              overflow-x: auto;
            }}
            th, td {{
              border: 1px solid #ccc;
              padding: 8px 10px;
              text-align: left;
            }}
            th {{
              background-color: #005792;
              color: white;
            }}
            tr:nth-child(even) {{
              background-color: #f2f2f2;
            }}
            .footer {{
              font-size: 12px;
              color: #888;
              text-align: center;
              margin-top: 40px;
            }}
          </style>
        </head>
        <body>
          <h1>üìà Daily Stock Alert</h1>
          <p>Here is your personalized stock summary for <strong>{datetime.datetime.now().strftime('%B %d, %Y')}</strong>:</p>
        '''

        htmlfooter = '''
          <div class="footer">
            <p>This is an automated stock alert email.</p>
            <p>Generated by your analytics bot ü§ñ</p>
          </div>
        </body>
        </html>
        '''

        email_body_parts = []

        def attach_if_not_empty(df_path, df_label):
            try:
                df = pd.read_csv(df_path)

                if "close_price" not in df.columns:
                    print(f"Skipping {df_label}: 'close_price' column not found.")
                    return

                df = df[df["close_price"].notna()]
                df.dropna(axis=1, how='all', inplace=True)

                if not df.empty:
                    table_html = df.to_html(index=False).replace('border="1"', 'border="1" style="border-collapse:collapse"')
                    html_table = f'<div class="table-wrapper">{table_html}</div>'
                    email_body_parts.append(f"<h2>{df_label}</h2>{html_table}")
                    with open(df_path, 'rb') as file:
                        message.attach(MIMEApplication(file.read(), Name=os.path.basename(df_path)))
                else:
                    print(f"Skipping {df_label}: No data after filtering.")
            except Exception as e:
                print(f"Error processing {df_label}: {e}")

        # Attach filtered datasets
        attach_if_not_empty(indicators_result_csv_path_large, "üìä Large Cap")
        attach_if_not_empty(indicators_result_csv_path_mid, "üìâ Mid Cap")
        attach_if_not_empty(indicators_result_csv_path_small, "üìà Small Cap")

        # Attach full report if valid
        try:
            df_full = pd.read_csv(indicators_result_csv_path_full)

            if "close_price" not in df_full.columns:
                print("Full report skipped: 'close_price' column not found.")
            else:
                df_full = df_full[df_full["close_price"].notna()]
                df_full.dropna(axis=1, how='all', inplace=True)

                if not df_full.empty:
                    with open(indicators_result_csv_path_full, 'rb') as file:
                        message.attach(MIMEApplication(file.read(), Name=os.path.basename(indicators_result_csv_path_full)))
                else:
                    print("Full report skipped: No data after filtering.")
        except Exception as e:
            print(f"Error attaching full report: {e}")

        # Send email if there's content
        if email_body_parts:
            emailfinal = htmlheader + ''.join(email_body_parts) + htmlfooter
            message.attach(MIMEText(emailfinal, "html"))

            s = smtplib.SMTP('smtp.gmail.com', 587)
            s.starttls()
            s.login(SENDER_EMAIL, SENDER_EMAIL_PASSWORD)
            s.sendmail(SENDER_EMAIL, EMAIL_ID_LIST, message.as_string())
            print('‚úÖ Email sent successfully.')
            s.quit()
        else:
            print("‚ö†Ô∏è No data to send. Email skipped.")

    except smtplib.SMTPException as e:
        print(f"SMTP Error: {e}")
    except Exception as e:
        print(f"Unexpected error: {e}")
